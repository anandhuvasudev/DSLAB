
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 100

int graph[MAX][MAX];                   // Adjacency matrix for the graph
int visited[MAX];                      // Tracks visited vertices during traversals
int queue[MAX], front = -1, rear = -1; // Queue for BFS
int n;                                 // Number of vertices
char vertices[MAX];                    // Store vertex labels (e.g., 'a', 'b', etc.)
char topoSort[MAX];                    // Store topological sort order
int topoIndex;                         // Index for topological sort

// Function declarations
int findIndex(char vertex);

void enqueue(int vertex)
{
    if (rear == MAX - 1)
    {
        printf("Queue Overflow\n");
        return;
    }
    if (front == -1)
        front = 0;
    queue[++rear] = vertex;
}

int dequeue()
{
    if (front == -1 || front > rear)
    {
        printf("Queue Underflow\n");
        return -1;
    }
    return queue[front++];
}

int isQueueEmpty()
{
    return front == -1 || front > rear;
}

void BFS(int start)
{
    for (int i = 0; i < n; i++)
        visited[i] = 0; // Reset visited array for fresh traversal

    enqueue(start);
    visited[start] = 1;

    printf("BFS Traversal: ");

    while (!isQueueEmpty())
    {
        int current = dequeue();
        printf("%c ", vertices[current]); // Print vertex as character

        for (int i = 0; i < n; i++)
        {
            if (graph[current][i] && !visited[i])
            {
                enqueue(i);
                visited[i] = 1;
            }
        }
    }
    printf("\n");
}

void DFSUtil(int vertex)
{
    visited[vertex] = 1;
    printf("%c ", vertices[vertex]); // Print vertex label

    for (int i = 0; i < n; i++)
    {
        if (graph[vertex][i] && !visited[i])
        {
            DFSUtil(i); // Recursively visit unvisited neighbors
        }
    }
}

void DFS(int start)
{
    for (int i = 0; i < n; i++)
        visited[i] = 0; // Reset visited array for fresh traversal

    printf("DFS Traversal: ");
    DFSUtil(start); // Start DFS from the specified vertex
    printf("\n");
}

void topologicalSort()
{
    topoIndex = n; // Initialize index for topological sort
    for (int i = 0; i < n; i++)
        visited[i] = 0;

    // Perform DFS for all unvisited vertices
    for (int i = 0; i < n; i++)
    {
        if (!visited[i])
        {
            DFSUtil(i);
        }
    }

    printf("Topological Sort: ");
    for (int i = 0; i < n; i++)
    {
        printf("%c ", topoSort[i]);
    }
    printf("\n");
}

void createGraph()
{
    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the vertex labels (e.g., a b c ...): ");
    for (int i = 0; i < n; i++)
    {
        scanf(" %c", &vertices[i]);
    }

    // Initialize the adjacency matrix to zero
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            graph[i][j] = 0;
        }
    }

    int numEdges;
    printf("Enter the number of edges: ");
    scanf("%d", &numEdges);

    printf("Enter the edges (source destination) in format: source destination\n");
    for (int i = 0; i < numEdges; i++)
    {
        char src, dest;
        scanf(" %c %c", &src, &dest);

        int srcIndex = findIndex(src);
        int destIndex = findIndex(dest);

        if (srcIndex != -1 && destIndex != -1)
        {
            graph[srcIndex][destIndex] = 1;
        }
        else
        {
            printf("Invalid vertices! Please try again.\n");
            i--;
        }
    }
}

int findIndex(char vertex)
{
    for (int i = 0; i < n; i++)
    {
        if (vertices[i] == vertex)
            return i;
    }
    return -1; // Return -1 if vertex is not found
}

int main()
{
    int choice;
    char startVertex;

    createGraph(); // Create the graph

    while (1)
    {
        printf("\nMenu:\n");
        printf("1. BFS\n");
        printf("2. DFS\n");
        printf("3. Topological Sort\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice)
        {
        case 1:
            printf("Enter the starting vertex for BFS: ");
            scanf(" %c", &startVertex);
            BFS(findIndex(startVertex));
            break;
        case 2:
            printf("Enter the starting vertex for DFS: ");
            scanf(" %c", &startVertex);
            DFS(findIndex(startVertex));
            break;
        case 3:
            topologicalSort();
            break;
        case 4:
            printf("Exiting...\n");
            exit(0);
        default:
            printf("Invalid choice!\n");
        }
    }

    return 0;
}
